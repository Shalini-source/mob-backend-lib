name: Mirror Maven Artifact with Dependencies

on:
  workflow_dispatch:
    inputs:
      group_id:
        description: 'Group ID (e.g. org.apache.commons)'
        required: true
      artifact_id:
        description: 'Artifact ID (e.g. commons-lang3)'
        required: true
      version:
        description: 'Version (e.g. 3.14.0)'
        required: true

jobs:
  mirror-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: üîß Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: üì¶ Configure Maven settings
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.PAT_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: üìã Create temporary pom.xml
        run: |
          mkdir -p temp
          cat > temp/pom.xml <<EOF
          <project>
            <modelVersion>4.0.0</modelVersion>
            <groupId>mirror</groupId>
            <artifactId>mirror-artifact</artifactId>
            <version>1.0.0</version>
            <dependencies>
              <dependency>
                <groupId>${{ github.event.inputs.group_id }}</groupId>
                <artifactId>${{ github.event.inputs.artifact_id }}</artifactId>
                <version>${{ github.event.inputs.version }}</version>
              </dependency>
            </dependencies>
          </project>
          EOF

      - name: üìÅ Prepare artifact folders
        run: |
          mkdir -p ./artifact/jars ./artifact/tree_jars ./artifact/full_tree_jars
          mkdir -p ./artifact/poms ./artifact/tree_poms ./artifact/full_tree_poms
          mkdir -p ./uploaded

      - name: üì• Download direct JARs
        run: |
          mvn -f temp/pom.xml dependency:copy-dependencies \
            -DoutputDirectory=./artifact/jars

      - name: üìã List dependencies
        run: |
          mvn -f temp/pom.xml dependency:list \
            -DincludeScope=runtime \
            -DoutputFile=deps.txt \
            -DoutputAbsoluteArtifactFilename=false \
            -DappendOutput=true

      - name: üì• Download transitive POMs and JARs (Skip if exists)
        run: |
          grep ":" deps.txt | while read dep; do
            base=$(echo "$dep" | cut -d: -f2,3 | tr ':' '-')
            jar="./artifact/tree_jars/${base}.jar"
            pom="./artifact/tree_poms/${base}.pom"

            if [[ -f "$jar" && -f "$pom" ]]; then
              echo "‚è≠Ô∏è Skipping $dep ‚Äî Already downloaded"
              continue
            fi

            mvn dependency:get -Dartifact=$dep:pom -Dtransitive=false
            mvn dependency:copy -Dartifact=$dep:pom -DoutputDirectory=./artifact/tree_poms
            mvn dependency:copy -Dartifact=$dep -DoutputDirectory=./artifact/tree_jars
          done

      - name: üå≤ Download full dependency tree (JAR + POMs)
        run: |
          mvn -f temp/pom.xml dependency:tree -DoutputType=dot > tree.dot

          cat tree.dot | grep -oP '\"[^:]+:[^:]+:[^:]+\"' | tr -d '"' | sort | uniq | while read dep; do
            base=$(echo "$dep" | cut -d: -f2,3 | tr ':' '-')
            jar="./artifact/full_tree_jars/${base}.jar"
            pom="./artifact/full_tree_poms/${base}.pom"

            if [[ -f "$jar" && -f "$pom" ]]; then
              echo "‚è≠Ô∏è Skipping $dep ‚Äî Already downloaded"
              continue
            fi

            mvn dependency:get -Dartifact=$dep:pom -Dtransitive=false
            mvn dependency:copy -Dartifact=$dep:pom -DoutputDirectory=./artifact/full_tree_poms
            mvn dependency:copy -Dartifact=$dep -DoutputDirectory=./artifact/full_tree_jars
          done

      - name: üöÄ Publish JARs and POMs (Avoid duplicates & check GitHub)
        run: |
          echo "üì§ Publishing artifacts with matching POMs"
          for jar in ./artifact/jars/*.jar ./artifact/tree_jars/*.jar ./artifact/full_tree_jars/*.jar; do
            [ -e "$jar" ] || continue
            base=$(basename "$jar" .jar)

            if [[ -f "./uploaded/${base}.done" ]]; then
              echo "‚è≠Ô∏è Skipping $base ‚Äî Already processed"
              continue
            fi

            if [[ -f "./artifact/poms/${base}.pom" ]]; then
              pom="./artifact/poms/${base}.pom"
            elif [[ -f "./artifact/tree_poms/${base}.pom" ]]; then
              pom="./artifact/tree_poms/${base}.pom"
            elif [[ -f "./artifact/full_tree_poms/${base}.pom" ]]; then
              pom="./artifact/full_tree_poms/${base}.pom"
            else
              echo "‚ö†Ô∏è Skipping $jar ‚Äî No matching POM found"
              continue
            fi

            GROUP_ID=$(grep -oPm1 "(?<=<groupId>)[^<]+" "$pom" | tr . /)
            ARTIFACT_ID=$(grep -oPm1 "(?<=<artifactId>)[^<]+" "$pom")
            VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" "$pom")
            JAR_URL="https://maven.pkg.github.com/${{ github.repository }}/$GROUP_ID/$ARTIFACT_ID/$VERSION/${ARTIFACT_ID}-${VERSION}.jar"

            if curl --head --silent --fail "$JAR_URL" > /dev/null; then
              echo "üîí Skipping $base ‚Äî Already published on GitHub Packages"
              touch "./uploaded/${base}.done"
              continue
            fi

            echo "üöÄ Deploying $base"
            mvn deploy:deploy-file \
              -Dfile="$jar" \
              -DpomFile="$pom" \
              -DrepositoryId=github \
              -Durl="https://maven.pkg.github.com/Shalini-source/mob-backend-lib"
            touch "./uploaded/${base}.done"
          done
