name: Mirror Maven Artifact with Dependencies

on:
  workflow_dispatch:
    inputs:
      group_id:
        description: 'Group ID (e.g. org.apache.commons)'
        required: true
      artifact_id:
        description: 'Artifact ID (e.g. commons-lang3)'
        required: true
      version:
        description: 'Version (e.g. 3.14.0)'
        required: true

jobs:
  mirror-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: 🔧 Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: 📦 Configure Maven settings
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.PAT_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: 📋 Create temporary pom.xml
        run: |
          mkdir -p temp
          cat > temp/pom.xml <<EOF
          <project>
            <modelVersion>4.0.0</modelVersion>
            <groupId>mirror</groupId>
            <artifactId>mirror-artifact</artifactId>
            <version>1.0.0</version>
            <dependencies>
              <dependency>
                <groupId>${{ github.event.inputs.group_id }}</groupId>
                <artifactId>${{ github.event.inputs.artifact_id }}</artifactId>
                <version>${{ github.event.inputs.version }}</version>
              </dependency>
            </dependencies>
          </project>
          EOF

      - name: 📁 Prepare artifact folders
        run: |
          mkdir -p ./artifact/jars ./artifact/tree_jars
          mkdir -p ./artifact/poms ./artifact/tree_poms
          mkdir -p ./uploaded

      - name: 📥 Download direct JARs
        run: |
          mvn -f temp/pom.xml dependency:copy-dependencies \
          -DoutputDirectory=./artifact/jars

      - name: 📃 List dependencies
        run: |
          mvn -f temp/pom.xml dependency:list \
          -DincludeScope=runtime \
          -DoutputFile=deps.txt \
          -DoutputAbsoluteArtifactFilename=false \
          -DappendOutput=true

      - name: 🔍 Inspect deps.txt
        run: |
          echo "📄 Parsed dependencies:"
          cat deps.txt || echo "⚠️ deps.txt not found"

      - name: 📄 Download transitive POMs and JARs
        run: |
          grep ":" deps.txt | while read dep; do
            mvn dependency:get -Dartifact=$dep:pom -Dtransitive=false
            mvn dependency:copy -Dartifact=$dep:pom -DoutputDirectory=./artifact/tree_poms
            mvn dependency:copy -Dartifact=$dep -DoutputDirectory=./artifact/tree_jars
          done

      - name: 🚀 Publish JARs and POMs (Skip duplicates & GitHub check)
        run: |
          echo "📤 Publishing artifacts with matching POMs"

          for jar in ./artifact/jars/*.jar ./artifact/tree_jars/*.jar; do
            [ -e "$jar" ] || continue
            base=$(basename "$jar" .jar)

            # Already uploaded in this run
            if [[ -f "./uploaded/${base}.done" ]]; then
              echo "⏭️ Skipping $base — Already processed"
              continue
            fi

            # Find matching POM
            if [[ -f "./artifact/poms/${base}.pom" ]]; then
              pom="./artifact/poms/${base}.pom"
            elif [[ -f "./artifact/tree_poms/${base}.pom" ]]; then
              pom="./artifact/tree_poms/${base}.pom"
            else
              echo "⚠️ Skipping $jar — No matching POM found"
              continue
            fi

            # Check if artifact is already published to GitHub Maven
            GROUP_ID=$(grep -oPm1 "(?<=<groupId>)[^<]+" "$pom" | tr . /)
            ARTIFACT_ID=$(grep -oPm1 "(?<=<artifactId>)[^<]+" "$pom")
            VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" "$pom")

            JAR_URL="https://maven.pkg.github.com/${{ github.repository }}/$GROUP_ID/$ARTIFACT_ID/$VERSION/${ARTIFACT_ID}-${VERSION}.jar"

            if curl --head --silent --fail "$JAR_URL" > /dev/null; then
              echo "🛑 Skipping $base — Already published on GitHub Packages"
              touch "./uploaded/${base}.done"
              continue
            fi

            echo "🚀 Deploying $base"
            mvn deploy:deploy-file \
              -Dfile="$jar" \
              -DpomFile="$pom" \
              -DrepositoryId=github \
              -Durl="https://maven.pkg.github.com/Shalini-source/mob-backend-lib"

            touch "./uploaded/${base}.done"
          done
